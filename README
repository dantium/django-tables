django-tables
=============

Installation
------------

Adding django-tables to your INSTALLED_APPS settings is optional, it'll get
you the ability to load some template utilities via {% load tables %}, but
apart from that, ``import django_tables as tables`` should get you going.

Running the test suite
----------------------

The test suite uses py.test (from http://codespeak.net/py/dist/test.html).

Defining Tables
---------------

Using Tables
------------

Create

Tables and Pagination
---------------------

    table = MyTable(queryset)
    p = Paginator(table.rows, 10)  # paginator will need to be able to handle our modelproxy

    or

    table = MyTable(queryset)
    table.pagination = Paginator(10, padding=2)

    or

    table.paginate(DiggPaginator, 10, padding=2)

Works exactly like in the Django database API. Order may be specified as
a list (or tuple) of column names. If prefixed with a hypen, the ordering
for that particular field will be in reverse order.

Random ordering is currently not supported.


Ordering Syntax
---------------

Works exactly like in the Django database API. Order may be specified as
a list (or tuple) of column names. If prefixed with a hypen, the ordering
for that particular field will be in reverse order.

Random ordering is currently not supported.


Template Utilities
------------------

If you want the give your users the ability to interact with your table (e.g.
change the ordering), you will need to create urls with the appropriate
queries. To simplify that process, django-tables comes with helpful
templatetag:

    {% set_url_param "sort" "name" %}       # ?sort=name
    {% set_url_param "sort" %}              # delete "sort" param

The template library can be found in 'django_modules.app.templates.tables'.
If you add ''django_modules.app' to your INSTALLED_APPS setting, you will
be able to do:

    {% load tables %}


TODO
----
    - Let columns change their default ordering (ascending/descending)
    - Filters
    - Grouping
    - Choices-like data